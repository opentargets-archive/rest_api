
swagger: '2.0'

info:
  version: "1.2.0"
  description: |

    The Target Validation Platform API ('Application Programming Interface')
    allows programmatic retrieval of our data via a set of
    [REST](https://en.wikipedia.org/wiki/Representational_state_transfer)
    services.

    You can make calls to the latest version of our API using the base URL
     `https://www.targetvalidation.org/api/latest`. We do not accept unencrypted 
     `http` calls, so make sure you use `https` in the address instead. 
    If you want to point to a specific version of the API, eg 1.1, your call will be
      `https://www.targetvalidation.org/api/1.1`.

    We list below the methods available to query directly from our API using 
    an interactive and easy-to-use interface. For every request you create below, 
    the interface will display an equivalent [curl](https://curl.haxx.se/) command 
    that you can copy and paste directly to a shell and obtain the same results without
    using an internet browser.
    
    Check our [API blog posts](https://blog.opentargets.org/tag/api), for additional 
    information on programmatic access of our data.


    ### Available Methods

    The available methods can be grouped in four types:

    * __public__ - Methods that serve the core set of our data. These are stable and fully supported.
    * __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods
    may change without notice and should be used with caution.
    * __utils__ - Methods to get statistics and technical data about our API.
    * __auth__ - Methods used for authentication. These are only relevant if you have an API key (see the 'Fair Usage 
    and API keys' section below for more details).

    ### Supported formats

    The four methods above are all available via a `GET` request, and will serve outputs as `json`. Alternative output formats such `xml`, `csv` and `tab` are also available for some of the methods.
    Please note that alternative output formats are not supported in this interactive page. The response here will always be in `json` format.

    If you have complex queries with large number of parameters, you should
    use a `POST` request instead of  `GET`. `POST` methods require a body encoded as `json`.
    When quering for a specific disease using the latest version of the API, your call would look like the example below:

    ```sh
    curl -X POST -d '{"disease":["EFO_0000253"]}' --header 'Content-Type: application/json' https://www.targetvalidation.org/api/latest/public/evidence/filter
    ```
    ### Interpret a response

    Each HTTP response serve data in headers and body.
    The headers will give you useful information about your query, detailing how long it took to run, and how much usage you have left (See the 'Fair Usage 
    and API keys' section below for more details).

    In the body of the response, you will find the data you have requested for in `json` format.
    [jq](http://www.jq.org) is a useful tool to parse the json response while on the command line.

    ```sh
    curl https://www.targetvalidation.org/api/latest/public/association/filter\?target\=ENSG00000157764 | jq
    ```

    ### Fair Usage and API keys

    We have a usage limit to the calls made to our Target Validation Platform API. The usage is computed based on how much time the
    queries take to get executed in our servers.
    The limit is expressed in milliseconds and is computed over two time windows, namely 10 seconds and 1 hour.
    You can check the usage status in the header response. If the quota is exceeded, a `429` error will get returned.
    The response will also show how much time is needed to wait until a new call can be made. This will be in the `Retry-After` header.
    Please note that if you continue making calls despite the `429` error, your future usage within that time window will be compromised.

    The default usage limit will not impact a typical use of the REST API. But if you plan to do large numbers of requests or are building 
    an application leveraging our API, you need to complete our [Open Targets API key request form](http://goo.gl/forms/heGJvffv7PuUpWzG2).
    The API key will allow you to make more requests than an anonymous user. Using an API key will also help if you are behind a firewall or proxy in your company or academic 
    institution and many users reach our servers from the same IP address.

    * Request a token with your credentials using the method '/public/auth/request_token'

    ```python
    import requests
    API='https://www.targetvalidation.org/api/latest/'

    jwt = requests.get(API + 'public/auth/request_token',
                     params={'app_name':<appname>,'secret':<secret>})

    print(jwt.json())
    ```
   Once you have the API key, which consists of 'app_name' and 'secret', you will have to go through the authorization workflow to use it.

    * Read the token served in the response and pass it into any other following request as an `Auth-Token` header

    ```python
    import requests

    def get_token(app_name,secret):
      jwt = requests.get(API + 'public/auth/request_token',
                     params={'app_name':app_name,'secret':secret})
      return jwt.json()['token']

    token = get_token(<appname>,<secret>)

    response = requests.get(API + 'association/filter',
                        params={'disease'='EFO_0000270'},
                        headers={'Auth-Token': token})

    print(response.json())
    ```

    * By default tokens will expire after 20 minutes. Once your token expires, you will get a `429` error. If it happens you need to request another token.

    Please refrain from _requesting a new token for each request_ you make. This would both impact your usage limit and slow down the calls.

    Although *we never track the content of your API request*, we may monitor aggregated statistics on the usage of our API, so that we can improve its performance.

    We want to hear your opinion about the Target Validation Platform API. Can we make it more useful to you? Would you like additional methods to be avaiable? Do [get in touch]
    (mailto:support@targetvalidation.org) and send your comments and suggestions.

    ### More examples
    Head to our [Getting started tutorial](https://blog.opentargets.org/api-getting-started-1) for more
    examples on how to use the API and for some code snippets, which can be used to construct more complex queries.
  license:
    name: Apache 2.0
  contact:
    email: support@targetvalidation.org
  termsOfService: |
    Fair usage is enforced with limits to the api calls. Consistently exceeding the fair usage limits will trigger at
    least a 24 hour ban.
tags:
  - name: public
    open: true
    description: Publicly supported stable API.
  - name: private
    description: Unstable API methods. Subject to change without prior notice. Use at your own risk.
    open: false
  - name: auth
    description: Authentication methods.
    open: false
  - name: utils
    open: true
    description: Utility methods.
basePath: /api/latest
consumes:
  - application/json
produces:
  - application/json
  - text/xml
  - text/tab-separated-values
  - text/csv
# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /public/evidence:
    get:
      tags:
        - public
      description: |
        We call **evidence** a unit of data that support a connection between a target and a disease.
        The Target Validation Platform integrates multiple types of evidence including genetic associations,
        somatic mutations, RNA expression and connections mined from the literature.
        This method allows you to retrieve a single evidence item or a list of pieces of evidence by using their
        targetvalidation.org ID.

        Evidence IDs are unique within each data release (e.g. `8ed3d7568a8c6cac9c95cfb869bac762`).
        You can obtain a list of evidence and their IDs from other API calls such as [/public/evidence/filter](#!/public/get_public_evidence_filter).

        **Please note** that a specific evidence ID may change between data releases. We can not guarantee that a specific evidence ID will refer to the same piece of evidence connecting a target and its diseases.
      parameters:
        - name: id
          in: query
          description: id of the evidencestring to retrieve
          required: true
          type: string
      responses:
        200:
          description: Successful response
          # schema:
          #   title: DataContainer
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: EvidenceString
          #     type: object
          #     properties:
          #       id:
          #         type: string
    post:
      tags:
        - public
      description: |
        This is the POST version of [/public/evidence](#!/public/get_public_evidence)
        It allows to query for list of evidence strings encoded in a `json` object to be passed in the body.
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"id":["id1", "id2"]}
          description: ids of the evidencestring to retrieve
          required: true
      responses:
        200:
          description: Successful response
          # schema:
          #   title: DataContainer
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: EvidenceString
          #     type: object
          #     properties:
          #       id:
          #         type: string
  /public/evidence/filter:
    get:
      tags:
        - public
      description: |
        The filter method allows to retrieve the specific data that support a connection between targets and diseases.
        Filters can be used to restrict the results by source and type of data,
        or limit results to targets which are part of a particular pathway .
        Minimum and maximum score can be specified as well as the type of evidence linking target and disease.
        Notice multiple genes and disease can be specified in the same request.
      parameters:
        - name: target
          in: query
          description: a target identifier listed as target.id
          required: false
          type: string
        - name: disease
          in: query
          description: a EFO code listed as disease.id
          required: false
          type: string
        - name: datasource
          in: query
          description: datasource to consider
          required: false
          type: string
        - name: datatype
          in: query
          description: datatype to consider
          required: false
          type: string
        - name: pathway
          in: query
          description: a pathway identifier (meaning all the targets linked to that pathway)
          required: false
          type: string
        - name: uniprotkw
          in: query
          description: a uniprot keyword (meaning all the targets linked to that kw)
          required: false
          type: string
        - name: datastructure
          in: query
          description: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
          required: false
          type: string
        - name: fields
          in: query
          description: fields you want to retrieve. this will get priority over the datastructure requested
          required: false
          type: string
        - name: scorevalue_min
          in: query
          description: filter by minimum score value. default is 0, but using 0.2 is a good tradeoff to filter lower quality data points
          required: false
          type: number
          format: float
          default: 0.
        - name: scorevalue_max
          in: query
          description: filter by maximum score value
          required: false
          type: number
          format: float
        - name: sort
          in: query
          description: |
            Sort by the given field. Defaults to 'scores.association_score' and descending order. use '~' prefix to do ascending
            order eg. '~scores.association_score'. Supports multiple entries.
          required: false
          type: string
        - name: size
          in: query
          description: maximum amount of results to return. Defaults to 10, max is 10000
          required: false
          type: number
          format: integer
        - name: from
          in: query
          description: How many initial results should be skipped. Defaults to 0
          required: false
          type: number
          format: integer
        - name: format
          in: query
          description: Format to get data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
          required: false
          type: string
      responses:
        200:
          description: Successful response
    post:
      tags:
        - public
      description: |
        POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter).
        Filters can be specified as part of a `json` object in the body, simplifying the submission of queries.
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"target":["ENSG00000094755", "ENSG00000167207"], "disease":["EFO_0003767"]}
          description: filters to apply when retrieving evidencestring objects
          required: true
      responses:
        200:
          description: Successful response
          # schema:
          #   title: ArrayOfEvidenceStrings
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: EvidenceString
          #     type: object
          #     properties:
          #       id:
          #         type: string
  /public/association:
    get:
      tags:
        - public
      description: |
        After integrating all evidence connecting a target to a specific disease, we
        compute an association score by mean of an harmonic sum. This *association score* provides
        an indication of how strong the evidence behind each connection is and can be
        used to rank genes in order of likelihood as drug targets.
        The association id is constructed by using the ensembl id of the gene and the
        EFO id for the disease (eg. ENSG00000073756-EFO_0003767).
        The method returns an association object, which contain data and summary
        on each evidence type included in the calculation of the score, as well as the score itself.
      parameters:
        - name: id
          in: query
          description: an association ID usually in the form of `TARGET_ID-DISEASE_ID`
          required: true
          type: string
      responses:
        200:
          description: Successful response
  /public/association/filter:
    get:
      tags:
        - public
      description: |
        More complex queries for associations scores and objects can be done using
        this filter method, which allows to sort in different order, restrict to a specific class
        of diseases or targets, as well as filtering results by score and associated pathways.
      parameters:
        - name: target
          in: query
          description: a target identifier listed as target.id
          required: false
          type: string
        - name: disease
          in: query
          description: a EFO code listed as disease.id
          required: false
          type: string
        - name: therapeutic_area
          in: query
          description: a EFO code of a therapeutic area
          required: false
          type: string
        - name: datasource
          in: query
          description: datasource to consider
          required: false
          type: string
        - name: datatype
          in: query
          description: datatype to consider
          required: false
          type: string
        - name: pathway
          in: query
          description: a reactome pathway identifier (returning only those targets linked to the pathway specified)
          required: false
          type: string
        - name: uniprotkw
          in: query
          description: a uniprot keyword (meaning all the targets linked to that kw)
          required: false
          type: string
        - name: direct
          in: query
          description: If True returns associations that have at least one direct evidence connecting the target and the disease. If False only returns associations for wich there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.
          required: false
          type: boolean
        - name: datastructure
          in: query
          description: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
          required: false
          type: string
        - name: fields
          in: query
          description: fields you want to retrieve. this will get priority over the datastructure requested
          required: false
          type: string
        - name: facets
          in: query
          description: returns facets
          required: false
          type: boolean
          default: false
        - name: scorevalue_min
          in: query
          description: filter by minimum score value. default is 0, but using 0.2 is a good tradeoff to filter lower quality data points
          required: false
          type: number
          format: float
          default: 0
        - name: scorevalue_max
          in: query
          description: filter by maximum score value
          required: false
          type: number
          format: float
        - name: scorevalue_types
          in: query
          description: score types to apply the scorevalue min and max filters. defaults to `overall`
          required: false
          type: string
        - name: size
          in: query
          description: Maximum amount of results to return. Defaults to 10, max is 10000
          required: false
          type: number
          format: integer
        - name: from
          in: query
          description: How many initial results should be skipped. Defaults to 0
          required: false
          type: number
          format: integer
        - name: format
          in: query
          description: Format to get data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
          required: false
          type: string
        - name: sort
          in: query
          description: |
            Sort by the given score type. Defaults to 'overall' and descending order. use '~' prefix to do ascending
            order eg. '~overall'. Call a datatype score like: 'datatypes.literature', and a datasource one as
            'datasources.gwas'. Supports multiple entries.
          required: false
          type: string
        - name: search
          in: query
          description: |
            restrict the filtered results to those matching the passed string. The matching is done with a
            phrase match prefix
          required: false
          type: string
      responses:
        200:
          description: Successful response
          # schema:
          #   title: ArrayOfAssociations
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: Associations
          #     type: object
          #     properties:
          #       id:
          #         type: string
    post:
      tags:
        - public
      description: |
        Complex queries and filters for association objects can also be submitted using a JSON
        object and the equivalent POST method.
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"target":["target1", "target2"]}
          description: filters to apply when retrieving association objects
          required: true
      responses:
        200:
          description: Successful response
          # schema:
          #   title: ArrayOfAssociations
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: Associations
          #     type: object
          #     properties:
          #       id:
          #         type: string
  /private/disease/{disease}:
    get:
      tags:
        - private
      description: |
        Gets `disease` objects
      parameters:
        - name: disease
          in: path
          type: string
          required: true
          description: The EFO ID of the disease of interest.
      responses:
        200:
          description: Successful response
  /private/eco/{ECO_ID}:
    get:
      tags:
        - private
      description: |
        Gets `eco` objects
      parameters:
        - name: ECO_ID
          in: path
          type: string
          required: true
          description: An [evidence code ontology](http://www.ebi.ac.uk/ols/v2/browse.do?ontName=ECO) ID
      responses:
        200:
          description: Successful response
  /private/target/{target}:
    get:
      tags:
        - private
      description: |
        Gets `target` objects
      parameters:
        - name: target
          in: path
          required: true
          description: The ensembl gene ID for the target of interest.
          type: string
      responses:
        200:
          description: Successful response
  /private/target/expression:
    get:
      tags:
        - private
      description: |
        Gets `gene-expression` objects
      parameters:
        - name: gene
          in: query
          description: an ensembl gene identifier
          required: true
          type: string
      responses:
        200:
          description: Successful response
    post:
      tags:
        - private
      description: |
        Gets `gene-expression` objects
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"gene":["gene1", "gene2"]}
          description: an ensembl gene identifier
          required: true
      responses:
        200:
          description: Successful response
  /public/search:
    get:
      tags:
        - public
      description: |
        The search method allows to look for gene or diseases of interest using a free text search,
        replicating the functionality of the search box on our homepage. It should be used to identify
        the best match for a disease or target of interest, rather than gathering a specific set of evidences.
      parameters:
        - name: q
          in: query
          description: a full text query
          required: true
          type: string
        - name: size
          in: query
          description: Maximum amount of results to return. Defaults to 10, max is 10000
          required: false
          type: string
        - name: from
          in: query
          description: How many initial results should be skipped. Defaults to 0
          required: false
          type: string
        - name: filter
          in: query
          description: restrict the search to the type requested. Eg. `target` or `disease`.
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /private/quicksearch:
    get:
      tags:
        - private
      description: |
        Gets `search-result` objects
      parameters:
        - name: q
          in: query
          description: a full text query
          required: true
          type: string
        - name: size
          in: query
          description: Maximum amount of results to return. Defaults to 5.
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /private/autocomplete:
    get:
      tags:
        - private
      description: |
        Gets `autocomplete` objects
      parameters:
        - name: q
          in: query
          description: a full text query
          required: true
          type: string
        - name: size
          in: query
          description: Maximum amount of results to return. Defaults to 5
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /public/auth/request_token:
    get:
      tags:
        - public
        - auth
      description: |
        Gets an authentication token in the form of [JWT](https://jwt.io/).
      parameters:
        - name: app_name
          in: query
          description: the name of the app you are using to request a token. You need to register the app before you will be able to request a token.
          required: true
          type: string
        - name: secret
          in: query
          description: the secret you were given when registering your app.
          required: true
          type: string
        #- name: uid
        #  in: query
        #  description: the id of the user that is using your app
        #  required: false
        #  type: string
        #- name: password
        #  in: query
        #  description: the password of the user that is using your app
        #  required: false
        #  type: string
        - name: expiry
          in: query
          description: seconds before the token expires
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /public/auth/validate_token:
    get:
      tags:
        - public
        - utils
        - auth
      description: |
        Succeed if token is valid. You should test this call by passing the token in the header
        as 'Auth-Token'
      responses:
        200:
          description: Successful response
  /public/utils/ping:
    get:
      tags:
        - public
        - utils
      description: |
        Ping service
      responses:
        200:
          description: Successful response
  /public/utils/version:
    get:
      tags:
        - public
        - utils
      description: |
        Get current API version
      responses:
        200:
          description: Successful response
  /public/utils/stats:
    get:
      tags:
        - public
        - utils
      description: |
        Get stats about available data
      responses:
        200:
          description: Successful response
