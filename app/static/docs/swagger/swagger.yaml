
swagger: '2.0'

info:
  version: "1.1"
  title: targetvalidation.org REST API Documentation
  description: |
    You can access all data at the base of targetvalidation.org via a REST API.
    This page explains what each method does and also let's you query the API directly.
    Try building your query using the interactive interface below or
    head to the api tutorials for more complex examples.

    When you use the interactive interface, the API will return a response and you
    will be able to read the equivalent curl command. You can copy and paste it
    directly in the command line to obtain the same results without using your browser.

    All API access is over HTTPS, and accessed from the https://www.targetvalidation.com/api.
    All data is sent and received as JSON.
    For POST requests, parameters not included in the URL should be encoded as
    JSON by specifying `Content-Type: applicaation/json` in the request header.
    For instance, to query for a specific disease an example call might be

         curl -X POST -d '{"disease":["EFO_0000253"]}' --header 'Content-Type: application/json' https://alpha.targetvalidation.org/public/evidence/filter


    Head to the [API tutorials]() for more examples on how to use the API and code snippets which can be used to construct more complex queries.
  license:
    name: Apache 2.0
  contact:
    email: support@targetvalidation.org
  termsOfService: |
    Fair usage is enforced with limits to the api calls. Currently any excessive requests from the API triggers a 20 minutes ban.
tags:
  - name: public
    description: Publicly supported stable API. We will continue supporting these methods for the foreseeable future.
  - name: private
    description: Unstable API methods. We use these to render our the graphical web interface of our platform and they can change a lot over time, without any prior notice. Use at your own risk.
  - name: auth
    description: Authentication methods. After you [email us](mailto:info@targetvalidation.org) to get an API key, you can use these methods to validate it.
  - name: utils
    description: Utility methods. Miscellaneous utilities to query the status of our REST API.
basePath: /api/latest
consumes:
  - text/plain; charset=utf-8
  - application/json
produces:
  - application/json
  - text/xml
  - text/csv
# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /public/evidence:
    get:
      tags:
        - public
      description: |
        We call **evidence** all the data that support a connection between a target and a disease. targetvalidation.org integrates multiple types of evidence including genetic associations, somatic mutations, RNA expression and connections mined from the literature.
        This method allows you to retrieve a single evidence item or a list of evidences by using their targetvalidation.org internal ID.

        Evidence IDs are unique but complicated random strings (eg. `c4c9d3270db7ed179ab488c68a785ecf`).
        Generally, you will have obtained a list of evidence IDs from another API call. Any response from the [/public/evidence/filter](#!/public/get_public_evidence_filter) method for instance, can return a list of evidences and their IDs. See the [API tutorials]() for examples.

        **important note!** A specific evidence ID may change between data releases. We are currently not able to guarantee that a specific evidence ID will forever point to the same piece of evidence connecting target and disease.
      parameters:
        - name: id
          in: query
          description: id of the evidencestring to retrieve
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfPersons
            type: array
            items:
              title: EvidenceString
              type: object
              properties:
                name:
                  type: string
                single:
                  type: boolean
    post:
      tags:
        - public
      description: |
        This is the POST version of the samemethod allows you to retrieve a list of evidences by using their targetvalidation.org internal ID.

        Evidence IDs are unique but complicated random strings (eg. `c4c9d3270db7ed179ab488c68a785ecf`).
        Generally, you will have obtained a list of evidence IDs from another API call. Any response from the [/public/evidence/filter](#!/public/get_public_evidence_filter) method for instance, can return a list of evidences and their IDs. See the [API tutorials]() for examples.

        **important note!** A specific evidence ID may change between data releases. We are currently not able to guarantee that a specific evidence ID will forever point to the same piece of evidence connecting target and disease.
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {["id1", "id2"]}
          description: ids of the evidencestring to retrieve
          required: true
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfEvidenceStrings
            type: array
            items:
              title: EvidenceString
              type: object
              properties:
                name:
                  type: string
                single:
                  type: boolean
  /public/evidence/filter:
    get:
      tags:
        - public
      description: |
        The filter method allows to retrieve the specific data that support a connection between targets and diseases.
        Filters can be used to restrict the results by source and type of data,
        or limit results to targets which are part of a particular pathway in Reactome.
        Minimum and maximum score can be specified as well as the type of evidence linking target and disease.
        Searches can be restricted to pieces of evidence directly linking the two or evidence linking targets with associated diseases.
      parameters:
        - name: target
          in: query
          description: a target identifier listed as target.id
          required: false
          type: string
        - name: disease
          in: query
          description: a EFO code listed as disease.id
          required: false
          type: string
        - name: datasource
          in: query
          description: datasource to consider
          required: false
          type: string
        - name: datatype
          in: query
          description: datatype to consider
          required: false
          type: string
        - name: pathway
          in: query
          description: a pathway identifier (meaning all the targets linked to that pathway)
          required: false
          type: string
        - name: uniprotkw
          in: query
          description: a uniprot keyword (meaning all the targets linked to that kw)
          required: false
          type: string
        - name: datastructure
          in: query
          description: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
          required: false
          type: string
        - name: fields
          in: query
          description: fields you want to retrieve. this will get priority over the datastructure requested
          required: false
          type: string
        - name: scorevalue_min
          in: query
          description: filter by minimum score value. default is 0, but using 0.2 is a good tradeoff to filter lower quality data points
          required: false
          type: number
          format: float
          default: 0.
        - name: scorevalue_max
          in: query
          description: filter by maximum score value
          required: false
          type: number
          format: float
        - name: sortbyfield
          in: query
          description: |
            Sort by the given field. Defaults to 'scores.association_score' and descending order. use '~' prefix to do ascending
            order eg. '~scores.association_score'. Supports multiple entries.
          required: false
          type: string
        - name: size
          in: query
          description: maximum amount of results to return. Defaults to 10, max is 1000
          required: false
          type: number
          format: integer
        - name: from
          in: query
          description: How many initial results should be skipped. Defaults to 0
          required: false
          type: number
          format: integer
        - name: format
          in: query
          description: Format to get data back. Can be 'json', 'xml' or 'table'
          required: false
          type: string
      responses:
        200:
          description: Successful response
    post:
      tags:
        - public
      description: |
        The filter method allows to retrieve the specific data that support a connection between targets and diseases.
        In this POST version of the method above, filters can be specified as part of a JSON object, allowing more complex queries.
        Notice multiple genes and disease can be specified in the same request.
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"target":["ENSG00000094755", "ENSG00000167207"], "disease":["EFO_0003767"]}
          description: filters to apply when retrieving evidencestring objects
          required: true
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfEvidenceStrings
            type: array
            items:
              title: EvidenceString
              type: object
              properties:
                name:
                  type: string
                single:
                  type: boolean
  /public/association:
    get:
      tags:
        - public
      description: |
        After integrating all evidence connecting a target to a specific disease, we
        compute an association score by mean of an harmonic sum. This *association score* provides
        an indication of how strong the evidence behind each connection is and can be
        used to rank genes in order of likelihood as drug targets.
        The association id is constructed by using the ensembl id of the gene and the
        EFO id for the disease (eg. ENSG00000073756-EFO_0003767).
        The method returns an association object, which contain data and summary
        on each evidence type included in the calculation of the score, as well as the score itself.
      parameters:
        - name: id
          in: query
          description: not sure it is - TODO check the parameter list in the flask definition
          required: true
          type: string
      responses:
        200:
          description: Successful response
  /public/association/filter:
    get:
      tags:
        - public
      description: |
        More complex queries for associations scores and objects can be done using
        this filter method, which allows to sort in different order, restrict to a specific class
        of diseases or targets, as well as filtering results by score and associated pathways.
      parameters:
        - name: target
          in: query
          description: a target identifier listed as target.id
          required: false
          type: string
        - name: disease
          in: query
          description: a EFO code listed as disease.id
          required: false
          type: string
        - name: therapeutic_area
          in: query
          description: a EFO code of a therapeutic area
          required: false
          type: string
        - name: datasource
          in: query
          description: datasource to consider
          required: false
          type: string
        - name: datatype
          in: query
          description: datatype to consider
          required: false
          type: string
        - name: pathway
          in: query
          description: a reactome pathway identifier (returning only those targets linked to the pathway specified)
          required: false
          type: string
        - name: uniprotkw
          in: query
          description: a uniprot keyword (meaning all the targets linked to that kw)
          required: false
          type: string
        - name: datastructure
          in: query
          description: Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
          required: false
          type: string
        - name: fields
          in: query
          description: fields you want to retrieve. this will get priority over the datastructure requested
          required: false
          type: string
        - name: outputstructure
          in: query
          description: Type of output structure to return. Can be 'flat', or 'tree'.
          required: false
          type: string
        - name: facets
          in: query
          description: returns facets
          required: false
          type: boolean
          default: false
        - name: scorevalue_min
          in: query
          description: filter by minimum score value. default is 0, but using 0.2 is a good tradeoff to filter lower quality data points
          required: false
          type: number
          format: float
          default: 0
        - name: scorevalue_max
          in: query
          description: filter by maximum score value
          required: false
          type: number
          format: float
        - name: scorevalue_types
          in: query
          description: score types to apply the scorevalue min and max filters. defaults to `overall`
          required: false
          type: string
        - name: size
          in: query
          description: Maximum amount of results to return. Defaults to 10, max is 1000
          required: false
          type: number
          format: integer
        - name: from
          in: query
          description: How many initial results should be skipped. Defaults to 0
          required: false
          type: number
          format: integer
        - name: format
          in: query
          description: Format to get data back. Can be 'json', 'xml' or 'table'
          required: false
          type: string
        - name: sort
          in: query
          description: |
            Sort by the given score type. Defaults to 'overall' and descending order. use '~' prefix to do ascending
            order eg. '~overall'. Call a datatype score like: 'datatypes.literature', and a datasource one as
            'datasources.gwas'. Supports multiple entries.
          required: false
          type: string
        - name: search
          in: query
          description: |
            restrict the filtered results to those matching the passed string. The matching is done with a
            phrase match prefix
          required: false
          type: string
      responses:
        200:
          description: Successful response
    post:
      tags:
        - public
      description: |
        Complex queries and filters for association objects can also be submitted using a JSON
        object and the equivalent POST method.
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"target":["target1", "target2"]}
          description: filters to apply when retrieving association objects
          required: true
      responses:
        200:
          description: Successful response
          schema:
            title: ArrayOfAssociations
            type: array
            items:
              title: Associations
              type: object
              properties:
                name:
                  type: string
                single:
                  type: boolean
  /private/disease:
    get:
      tags:
        - private
      description: |
        Gets `disease` objects
      responses:
        200:
          description: Successful response
  /private/eco:
    get:
      tags:
        - private
      description: |
        Gets `eco` objects
      responses:
        200:
          description: Successful response
  /private/target:
    get:
      tags:
        - private
      description: |
        Gets `target` objects
      responses:
        200:
          description: Successful response
  /private/target/expression:
    get:
      tags:
        - private
      description: |
        Gets `gene-expression` objects
      parameters:
        - name: gene
          in: query
          description: an ensembl gene identifier
          required: true
          type: string
      responses:
        200:
          description: Successful response
    post:
      tags:
        - private
      description: |
        Gets `gene-expression` objects
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"gene":["gene1", "gene2"]}
          description: an ensembl gene identifier
          required: true
      responses:
        200:
          description: Successful response
  /public/search:
    get:
      tags:
        - public
      description: |
        The search method allows to look for gene or diseases of interest using a free text search,
        replicating the functionality of the search box on our homepage. It should be used to identify
        the best match for a disease or target of interest, rather than gathering a specific set of evidences.
      parameters:
        - name: q
          in: query
          description: a full text query
          required: true
          type: string
        - name: size
          in: query
          description: Maximum amount of results to return. Defaults to 10, max is 1000
          required: false
          type: string
        - name: from
          in: query
          description: How many initial results should be skipped. Defaults to 0
          required: false
          type: string
        - name: filter
          in: query
          description: restrict the search to the type requested. Eg. `target` or `disease`.
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /private/quicksearch:
    get:
      tags:
        - private
      description: |
        Gets `search-result` objects
      parameters:
        - name: q
          in: query
          description: a full text query
          required: true
          type: string
        - name: size
          in: query
          description: Maximum amount of results to return. Defaults to 5.
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /private/autocomplete:
    get:
      tags:
        - private
      description: |
        Gets `autocomplete` objects
      parameters:
        - name: q
          in: query
          description: a full text query
          required: true
          type: string
        - name: size
          in: query
          description: Maximum amount of results to return. Defaults to 5
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /public/auth/request_token:
    get:
      tags:
        - public
        - auth
      description: |
        Gets an authentication token in the form of [JWT](https://jwt.io/).
      parameters:
        - name: app_name
          in: query
          description: the name of the app you are using to request a token. You need to register the app before you will be able to request a token.
          required: true
          type: string
        - name: secret
          in: query
          description: the secret you were given when registering your app.
          required: true
          type: string
        - name: uid
          in: query
          description: the id of the user that is using your app
          required: false
          type: string
        - name: password
          in: query
          description: the password of the user that is using your app
          required: false
          type: string
        - name: expiry
          in: query
          description: seconds before the token expires
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /public/auth/validate_token:
    get:
      tags:
        - public
        - utils
        - auth
      description: |
        Succed if token is valid
      responses:
        200:
          description: Successful response
  /public/utils/ping:
    get:
      tags:
        - public
        - utils
      description: |
        Ping service
      responses:
        200:
          description: Successful response
  /public/utils/version:
    get:
      tags:
        - public
        - utils
      description: |
        Get current API version
      responses:
        200:
          description: Successful response
  /public/utils/stats:
    get:
      tags:
        - public
        - utils
      description: |
        Get stats about available data
      responses:
        200:
          description: Successful response
