
swagger: '2.0'

info:
  version: "1.2.0"
  description: |

    The Target Validation Platform API ('Application Programming Interface')
    allows programmatic retrieval of our data via a set of
    [REST](https://en.wikipedia.org/wiki/Representational_state_transfer)
    services.

    You can make calls to the latest version of our API using the base URL
     `https://www.targetvalidation.org/api/latest`. We do not accept unencrypted 
     `http` calls, so make sure you use `https` in the URL address. 
    If you want to point to a specific version of the API, e.g. 1.1, your call will be
      `https://www.targetvalidation.org/api/1.1`.

    We list below the methods available to query directly from our API using 
    an interactive and easy-to-use interface. For every request you create in this page, 
    the interface will display an equivalent [curl](https://curl.haxx.se/) command. You can copy and paste it
    directly to a shell to obtain the same results you would if you were using an internet browser.
    
    Check our [API blog posts](https://blog.opentargets.org/tag/api) for additional 
    information on programmatic access of our data.


    ### Available Methods

    The available methods can be grouped in four types:

    * __public__ - Methods that serve the core set of our data. These are stable and fully supported.
    * __private__ - Methods used by the web app to serve additional data that is not specific to our platform. These methods
    may change without notice and should be used with caution.
    * __utils__ - Methods to get statistics and technical data about our API.
    * __auth__ - Methods used for authentication. These are only relevant if you have an API key (see the 'Fair Usage 
    and API keys' section below for more details).

    ### Supported formats

    The four methods above are all available via a `GET` request, and will serve `JSON `outputs. Other output formats, such `XML`, `CSV` and `TAB`, can be available for some of the methods.
    Please note these alternative output formats are not supported in this interactive page. The response here will always be in `JSON`.

    If you have complex queries with large number of parameters, you should
    use a `POST` request instead of  `GET`. `POST` methods require a body encoded as `JSON`.
    When quering for a specific disease using the latest version of our API, your `POST` call would look like the example below:

    ```sh
    curl -X POST -d '{"disease":["EFO_0000253"]}' --header 'Content-Type: application/json' https://www.targetvalidation.org/api/lastest/public/evidence/filter
    ```
    ### Interpret a response

    Each `HTTP` response serves data in headers and body.
    The headers will give you useful information about your query, such as how long it took to run, and how much usage you have left (See the 'Fair Usage 
    and API keys' section below for more details).

    In the body of the response, you will get the requested data in `JSON` format.
   The [jq](https://stedolan.github.io/jq/) processor is a useful tool to parse the `JSON` response if you query our API from the command line.

    ```sh
    curl https://www.targetvalidation.org/api/latest/public/association/filter\?target\=ENSG00000157764 | jq
    ```

    ### Fair Usage and API keys

    We have a usage limit to the calls that are made to our Target Validation Platform API. The usage is computed based on how long the
    queries take to get executed in our servers.
    The limit is expressed in milliseconds and is computed over two time windows, namely 10 seconds and 1 hour.
    You can check the usage status in the header response. If the quota is exceeded, a `429` error will get returned.
    The response will also show how long is needed to wait until a new call can be made. This will be in the `Retry-After` header.
    Please note that if you continue making calls despite the `429` error, your future usage within that time window will be compromised.

    The default usage limit will not impact a typical use of our API. But if you plan to make large numbers of requests or are building 
    an application leveraging our API, you need to complete our [Open Targets API key request form](http://goo.gl/forms/heGJvffv7PuUpWzG2).
    The API key will allow you to make more requests than an anonymous user. If you are behind a firewall or proxy in your company or academic 
    institution, the API key will also allow several users reach our servers from the same IP address.

    * Request a token with your credentials using the method '/public/auth/request_token':

    ```python
    import requests
    API='https://www.targetvalidation.org/api/latest/'

    jwt = requests.get(API + 'public/auth/request_token',
                     params={'app_name':<appname>,'secret':<secret>})

    print(jwt.json())
    ```
    Once you have the API key, which consists of 'app_name' and 'secret', you need to go through the authorization workflow to use it.

    * Read the token served in the response and pass it into any other request as an `Auth-Token` header:

    ```python
    import requests

    def get_token(app_name,secret):
      jwt = requests.get(API + 'public/auth/request_token',
                     params={'app_name':app_name,'secret':secret})
      return jwt.json()['token']

    token = get_token(<appname>,<secret>)

    response = requests.get(API + 'association/filter',
                        params={'disease'='EFO_0000270'},
                        headers={'Auth-Token': token})

    print(response.json())
    ```

    By default tokens will expire after 20 minutes. Once your token expires, you will get a `429` error. If this happens, you will have to request another token.

    Please refrain from _requesting a new token for each API call_ you make. This would both impact your usage limit and slow down the calls.

    Although *we never track the content of your request*, we may monitor the usage of our API, aggreagate statitics and improve its performance.

    We want to hear your opinion about the Target Validation Platform API. 
    
    Can we make it more useful to you? Would you like additional methods to be avaiable? 
    Do [get in touch] (mailto:support@targetvalidation.org) and send your comments and suggestions.

    ### More examples
    Head to our [Getting started tutorial](https://blog.opentargets.org/api-getting-started-1) for more
    examples on how to use the API, and for some code snippets, which can be used to construct more complex queries.
  license:
    name: Apache 2.0
  contact:
    email: support@targetvalidation.org
  termsOfService: |
    Fair usage is enforced with limits to the API calls. If a user consistently exceeds the fair usage limits, this will trigger a 24 hour ban, at least.
tags:
  - name: public
    open: true
    description: Publicly supported and stable methods.
  - name: private
    description: Unstable methods that are subject to changes without prior notice; they should be used at users' own risks.
    open: false
  - name: auth
    description: Authentication methods.
    open: false
  - name: utils
    open: true
    description: Utility methods.
basePath: /api/latest
consumes:
  - application/json
produces:
  - application/json
  - text/xml
  - text/tab-separated-values
  - text/csv
# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /public/evidence:
    get:
      tags:
        - public
      description: |
        We call **evidence** a unit of data that supports the association between a target and a disease.
        The Target Validation Platform integrates multiple types of evidence such as genetic associations,
        somatic mutations, RNA expression, text mining, among others.
        
        This method allows you to retrieve a single evidence item or a list of pieces of evidence by using their
        targetvalidation.org ID.

        You can obtain a list of evidence and their IDs (e.g. `8ed3d7568a8c6cac9c95cfb869bac762`) from other API calls such as [/public/evidence/filter](#!/public/get_public_evidence_filter).

        **Please note** that evidence IDs are unique within each data release, and that it can also change between releases. [Email us] (mailto:support@targetvalidation.org) if you are in doubt.
      parameters:
        - name: id
          in: query
          description: the ID of the evidence string you want to retrieve
          required: true
          type: string
      responses:
        200:
          description: Successful response
          # schema:
          #   title: DataContainer
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: EvidenceString
          #     type: object
          #     properties:
          #       id:
          #         type: string
    post:
      tags:
        - public
      description: |
        This is the POST version of [/public/evidence](#!/public/get_public_evidence).
        It requires a body encoded as `JSON` and allows you to query for a list of evidence strings.
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"id":["id1", "id2"]}
          description: the IDs of the evidence strings you want to retrieve
          required: true
      responses:
        200:
          description: Successful response
          # schema:
          #   title: DataContainer
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: EvidenceString
          #     type: object
          #     properties:
          #       id:
          #         type: string
  /public/evidence/filter:
    get:
      tags:
        - public
      description: |
        This method allows you to retrieve the specific evidence data that support a connection between targets and diseases.
        You can restrict the results by different filters, such as the source of the evidence (e.g. Genetic associations) 
        and type of data (e.g. UniProt). You can also restrict the results to those targets of a pathway (e.g DNA repair, Immune system for example)
        and filter the evidence based on minimum and/or maximum scores.

        Note that multiple genes and diseases can be included in the same request if you add `&target` and `&disease`, respectively, in the REST call.
      parameters.
        - name: target
          in: query
          description: a target identifier listed as target.id
          required: false
          type: string
        - name: disease
          in: query
          description: a EFO code listed as disease.id
          required: false
          type: string
        - name: datasource
          in: query
          description: datasource to consider (e.g. UniProt)
          required: false
          type: string
        - name: datatype
          in: query
          description: datatype to consider (e.g. Genetic associations)
          required: false
          type: string
        - name: pathway
          in: query
          description: a pathway identifier (i.e. all the targets linked to a pathway)
          required: false
          type: string
        - name: uniprotkw
          in: query
          description: a UniProt keyword (i.e. all targets linked to that keyword such as Membrane)
          required: false
          type: string
        - name: datastructure
          in: query
          description: type of the data structure to return (e.g. 'full', 'simple', 'ids', or 'count')
          required: false
          type: string
        - name: fields
          in: query
          description: the fields you want to retrieve (e.g. target.gene_info.name). 'Fields' will get priority over the 'datastructure' requested.
          required: false
          type: string
        - name: scorevalue_min
          in: query
          description: to filter by the minimum score value. The default is 0, but as a trade-off you may want to use 0.2 to remove lower quality data points. 
          required: false
          type: number
          format: float
          default: 0.
        - name: scorevalue_max
          in: query
          description: to filter by the maximum score value
          required: false
          type: number
          format: float
        - name: sort
          in: query
          description: |
            it sorts by the given field. The default is 'scores.association_score', in descending order. For the ascending
            order, use the prefix '~', e.g. '~scores.association_score'. 'Sort' can support multiple entries.
          required: false
          type: string
        - name: size
          in: query
          description: the maximum amount of results to return. The default is 10, max is 10000.
          required: false
          type: number
          format: integer
        - name: from
          in: query
          description: how many initial results should be skipped. The defaults is 0.
          required: false
          type: number
          format: integer
        - name: format
          in: query
          description: the output format i.e. 'JSON', 'XML', 'TAB' or 'CSV'. **Note**: this option can only be used when calling the API directly. It will not work in this interactive page; the response here will always be JSON.
          required: false
          type: string
      responses:
        200:
          description: Successful response
    post:
      tags:
        - public
      description: |
        This is the POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter). 
        The filters can be specified as part of a `JSON` object in the body, which simplifies the query submission.
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"target":["ENSG00000094755", "ENSG00000167207"], "disease":["EFO_0003767"]}
          description: filters to apply when retrieving evidence string objects
          required: true
      responses:
        200:
          description: Successful response
          # schema:
          #   title: ArrayOfEvidenceStrings
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: EvidenceString
          #     type: object
          #     properties:
          #       id:
          #         type: string
  /public/association:
    get:
      tags:
        - public
      description: |
        After integrating all evidence connecting a target to a specific disease, we
        compute an association score by means of an harmonic sum. This *association score* provides
        an indication of how strong the evidence behind each association is. The score can be
        used to rank genes in order of their likelihood as drug targets.
        The association ID is constructed by using the Ensembl ID of the gene and the
        EFO ID for the disease (e.g. ENSG00000073756-EFO_0003767).
        The method will return an association object, which contains data and summary
        on each evidence type included in the calculation of the score, as well as the score itself.
      parameters:
        - name: id
          in: query
          description: an association ID usually in the form of `TARGET_ID-DISEASE_ID`
          required: true
          type: string
      responses:
        200:
          description: Successful response
  /public/association/filter:
    get:
      tags:
        - public
      description: |
        This method allows you to carry out more complex queries for associations scores and objects.
        You can sort the results in different order, restrict them to a specific class
        of diseases or targets, or filter the results by score and associated pathways.
      parameters:
        - name: target
          in: query
          description: a target identifier listed as target.id
          required: false
          type: string
        - name: disease
          in: query
          description: an EFO code listed as disease.id
          required: false
          type: string
        - name: therapeutic_area
          in: query
          description: an EFO code of a therapeutic area
          required: false
          type: string
        - name: datasource
          in: query
          description: the data source to consider (e.g. UniProt)
          required: false
          type: string
        - name: datatype
          in: query
          description: the data type to consider (e.g. Genetic associations)
          required: false
          type: string
        - name: pathway
          in: query
          description: the Reactome pathway ID (e.g. R-HSA-190063). It will return all targets linked to that ID.
          required: false
          type: string
        - name: uniprotkw
          in: query
          description: a UniProt keyword (e.g Membrane). It will return all the targets linked to that keyword.
          required: false
          type: string
        - name: direct
          in: query
          description: if True, it returns associations that have at least one direct evidence connecting the target and the disease. 
          If False, it returns evidence connecting the target to children terms of the disease in the EFO ontology. The associations
          have no direct evidence connecting the target and the disease.
          required: false
          type: boolean
        - name: datastructure
          in: query
          description: the type of data structure (e.g. 'full', 'simple', 'ids', or 'count') to return
          required: false
          type: string
        - name: fields
          in: query
          description: the fields (e.g. target.gene_info.name) to return. This will get priority over the data structure requested.
          required: false
          type: string
        - name: facets
          in: query
          description: returns facets
          required: false
          type: boolean
          default: false
        - name: scorevalue_min
          in: query
          description: to filter by a minimum score value. The default is 0, but as a trade-off 0.2 can also be used to filter low quality data points.
          required: false
          type: number
          format: float
          default: 0
        - name: scorevalue_max
          in: query
          description: to filter by a maximum score value
          required: false
          type: number
          format: float
        - name: scorevalue_types
          in: query
          description: the score types to apply both the 'scorevalue_min' and 'scorevalue_max' filters. The default is `overall`.
          required: false
          type: string
        - name: size
          in: query
          description: the maximum amount of results to return. The default is 10; maximum is 10000.
          required: false
          type: number
          format: integer
        - name: from
          in: query
          description: the number of initial results that will be skipped. The default is 0.
          required: false
          type: number
          format: integer
        - name: format
          in: query
          description: the output formats can be 'JSON', 'XML', 'TAB' or 'CSV'. **Note** that this option can only be used when calling the API directly. The alternative output options will not work in this interactive page; the response here will always be JSON.
          required: false
          type: string
        - name: sort
          in: query
          description: |
            to sort by a given score type. The default is 'overall' by descending order. You can use the prefix '~' for ascending
            order (e.g. '~overall'). You can call the scores for both data types (e.g. 'datatypes.literature') and data source (e.g.
            'datasources.gwas'). It supports multiple entries.
          required: false
          type: string
        - name: search
          in: query
          description: |
            to restrict the filtered results to those matching the passed string. The matching is done with a
            phrase match prefix.
          required: false
          type: string
      responses:
        200:
          description: Successful response
          # schema:
          #   title: ArrayOfAssociations
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: Associations
          #     type: object
          #     properties:
          #       id:
          #         type: string
    post:
      tags:
        - public
      description: |
       This is the POST version of [/public/association/filter](#!/public/get_public_association_filter) method for more complex queries.
       It uses a body encoded as `JSON`. 
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"target":["target1", "target2"]}
          description: filters to apply when retrieving association objects
          required: true
      responses:
        200:
          description: Successful response
          # schema:
          #   title: ArrayOfAssociations
          #   type: object
          #   properties:
          #       data:
          #         type: array
          #   items:
          #     title: Associations
          #     type: object
          #     properties:
          #       id:
          #         type: string
  /private/disease/{disease}:
    get:
      tags:
        - private
      description: |
        This method returns `disease` objects
      parameters:
        - name: disease
          in: path
          type: string
          required: true
          description: the EFO ID of the disease of interest
      responses:
        200:
          description: Successful response
  /private/eco/{ECO_ID}:
    get:
      tags:
        - private
      description: |
        This method returns the `eco` objects.
      parameters:
        - name: ECO_ID
          in: path
          type: string
          required: true
          description: an [Evidence and Conclusion Ontology](http://evidenceontology.org/Welcome.html) ID
      responses:
        200:
          description: Successful response
  /private/target/{target}:
    get:
      tags:
        - private
      description: |
        This method returns `target` objects
      parameters:
        - name: target
          in: path
          required: true
          description: the Ensembl gene ID for the target of interest
          type: string
      responses:
        200:
          description: Successful response
  /private/target/expression:
    get:
      tags:
        - private
      description: |
        This method returns `gene-expression` objects.
      parameters:
        - name: gene
          in: query
          description: an Ensembl gene identifier
          required: true
          type: string
      responses:
        200:
          description: Successful response
    post:
      tags:
        - private
      description: |
        This is the POST version of [/private/target/expression](#!/private/get_private_target_expression).
        
      parameters:
        - name: body
          in: body
          schema:
            type: string
            example: |
              {"gene":["gene1", "gene2"]}
          description: an Ensembl gene identifier
          required: true
      responses:
        200:
          description: Successful response
  /public/search:
    get:
      tags:
        - public
      description: |
        The search method allows to look for genes or diseases of interest using a free text search. This
        replicates the functionality of the search box on our homepage (targetvalidation.org). It is used to identify
        the best match for a disease or target of interest. It does not return the pieces of evidence associated with the target.
      parameters:
        - name: q
          in: query
          description: a full text query
          required: true
          type: string
        - name: size
          in: query
          description: the maximum amount of results to return. The default is 10, maximum is 10000.
          required: false
          type: string
        - name: from
          in: query
          description: how many initial results should be skipped. The defaults is 0.
          required: false
          type: string
        - name: filter
          in: query
          description: restrict the search to the type requested (e.g. `target` or `disease`)
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /private/quicksearch:
    get:
      tags:
        - private
      description: |
        This method returns `search-result` objects.
      parameters:
        - name: q
          in: query
          description: a full text query
          required: true
          type: string
        - name: size
          in: query
          description: the maximum amount of results to return. The default is 5.
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /private/autocomplete:
    get:
      tags:
        - private
      description: |
        This method returns `autocomplete` objects.
      parameters:
        - name: q
          in: query
          description: a full text query
          required: true
          type: string
        - name: size
          in: query
          description: the maximum amount of results to return. The default is 5.
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /public/auth/request_token:
    get:
      tags:
        - public
        - auth
      description: |
        This method returns an authentication token in the form of [JWT](https://jwt.io/).
      parameters:
        - name: app_name
          in: query
          description: the name of the app you are using to request a token. You should register the app before requesting a token.
          required: true
          type: string
        - name: secret
          in: query
          description: the secret you were given when registering your app
          required: true
          type: string
        #- name: uid
        #  in: query
        #  description: The id of the user that is using your app.
        #  required: false
        #  type: string
        #- name: password
        #  in: query
        #  description: The password of the user that is using your app.
        #  required: false
        #  type: string
        - name: expiry
          in: query
          description: seconds before the token expires
          required: false
          type: string
      responses:
        200:
          description: Successful response
  /public/auth/validate_token:
    get:
      tags:
        - public
        - utils
        - auth
      description: |
        If this method succeeds, the token is valid. You should test this call by passing the token in the header
        as 'Auth-Token'.
      responses:
        200:
          description: Successful response
  /public/utils/ping:
    get:
      tags:
        - public
        - utils
      description: |
        Ping service
      responses:
        200:
          description: Successful response
  /public/utils/version:
    get:
      tags:
        - public
        - utils
      description: |
        This method returns the current API version.
      responses:
        200:
          description: Successful response
  /public/utils/stats:
    get:
      tags:
        - public
        - utils
      description: |
        This method returns the statistics on the available data.
      responses:
        200:
          description: Successful response
