box:
  id: quay.io/opentargets/rest_api_base
  tag: $WERCKER_GIT_BRANCH
  registry: quay.io
dev:
  steps:
    - pip-install
    - internal/watch:
        code: python manage.py
        reload: true

# Build definition
build:
  # The steps that will be executed on build
  steps:
    - pip-install
    # run tests that don't require es
    - script:
        name: API auth test
        code: |
          nosetests tests/test_auth.py
    - script:
        name: API rate limit test
        code: |
          nosetests tests/test_rate_limit.py
#    - internal/store-container
    - script:
        name: copy to /var/www/app working dir
        code: |
          cp -r $WERCKER_ROOT/* /var/www/app/
    - script:
      name: export latest or dev tag
      code: |
        [ "$WERCKER_GIT_BRANCH" = "master" ] \
        && export LATEST_FLAG=latest \
        || export LATEST_FLAG=dev

    # test supervisord is configured properly
    - script:
        name: test services are started by supervisord
        code: |
          cp -r $WERCKER_ROOT/* /var/www/app/
          /usr/bin/supervisord &
          sleep 10
          OK_CODE="200"
          PING_CODE=$(curl -sL -w "%{http_code}\\n" "http://localhost:8008/api/latest/public/utils/ping" -o /dev/null)
          if [ "$PING_CODE" == "$OK_CODE" ]
            then
              echo "API ping OK"
            else
              echo -e "ERROR: ping http code:"$PING_CODE
              exit 1
            fi
          API_DOCS_CODE=$(curl -sL -w "%{http_code}\\n" "http://localhost:8008/api-docs" -o /dev/null)
          if [ "$API_DOCS_CODE" == "$OK_CODE" ]
            then
              echo "API DOCS OK"
            else
              echo -e "ERROR: api docs http code:"$API_DOCS_CODE
              exit 1
            fi
  after-steps:
    - mbrevda/github-status:
      token: $GITHUB_TOKEN
      context: rest_api_build
      msg: build completed
      fail: an error has occurred while building
      url: https://app.wercker.com/project/byKey/8d40646f32cfcb720f96ec9f29473d19


deploy:
  steps:
    #prepare container
    - pip-install
    - script:
        name: copy to /var/www/app working dir
        code: |
          cp -r $WERCKER_ROOT/* /var/www/app/
    - script:
      name: export latest or dev tag
      code: |
        [ "$WERCKER_GIT_BRANCH" = "master" ] \
        && export LATEST_FLAG=latest \
        || export LATEST_FLAG=dev

    #push to registries
    - internal/docker-push:
        username: $QUAY_USERNAME
        password: $QUAY_PASSWORD
        tag: $WERCKER_GIT_COMMIT, $WERCKER_GIT_BRANCH, $LATEST_FLAG
        repository: $QUAY_REPO
        registry: $QUAY_HOST
        working-dir: /var/www/app
        entrypoint: /docker-entrypoint.sh
        cmd: supervisord
        ports: "80 443 8008 8009"
        disable-sync: true

    - internal/docker-push:
        username: _json_key
        password: $GCR_JSON_KEY_FILE
        working-dir: /var/www/app
        entrypoint: /docker-entrypoint.sh
        tag: $WERCKER_GIT_COMMIT
        repository: $GCR_REPO
        registry: $GCR_HOST
        cmd: supervisord
        ports: "80 443 8008 8009"
        disable-sync: true
  after-steps:
    - mbrevda/github-status:
      token: $GITHUB_TOKEN
      context: rest_api_container
      msg: container pushed
      fail: an error has occurred building containers
      url: https://app.wercker.com/project/byKey/8d40646f32cfcb720f96ec9f29473d19


deploy-to-kubernentes:
  steps:
    - maestrohealthcaretechnologies/wait-github-statuses:
      status_contexts: rest_api_container
    #deploy to kubernentes
    - bash-template:
      input: "kube-conf/*.template"
    - script:
      name: Prepare Kubernetes files
      code: |
        mkdir $WERCKER_OUTPUT_DIR/kubernetes
        mv $WERCKER_ROOT/kube-conf/rest_api_*.yml $WERCKER_OUTPUT_DIR/kubernetes
    - riceo/kubectl:
      name: remove previous deployment
      server: $KUBERNETES_MASTER
      gcloud-key-json: $GCR_JSON_KEY_FILE
      gke-cluster-name: $GKE_CLUSTER_NAME
      gke-cluster-zone: $GKE_CLUSTER_ZONE
      gke-cluster-project: $GKE_CLUSTER_PROJECT
      command: delete deployment api-${WERCKER_GIT_BRANCH} --ignore-not-found --now
    - riceo/kubectl:
      name: deploy to kubernetes
      server: $KUBERNETES_MASTER
      gcloud-key-json: $GCR_JSON_KEY_FILE
      gke-cluster-name: $GKE_CLUSTER_NAME
      gke-cluster-zone: $GKE_CLUSTER_ZONE
      gke-cluster-project: $GKE_CLUSTER_PROJECT
      command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/
    - script:
          name: wait for kubernetes to start the services
          code: |
            sleep 20
    - riceo/kubectl:
      name: make sure the deployment is up
      server: $KUBERNETES_MASTER
      gcloud-key-json: $GCR_JSON_KEY_FILE
      gke-cluster-name: $GKE_CLUSTER_NAME
      gke-cluster-zone: $GKE_CLUSTER_ZONE
      gke-cluster-project: $GKE_CLUSTER_PROJECT
      command: get deployment api-${WERCKER_GIT_BRANCH}
    - riceo/kubectl:
      name: make sure the service is up
      server: $KUBERNETES_MASTER
      gcloud-key-json: $GCR_JSON_KEY_FILE
      gke-cluster-name: $GKE_CLUSTER_NAME
      gke-cluster-zone: $GKE_CLUSTER_ZONE
      gke-cluster-project: $GKE_CLUSTER_PROJECT
      command: get service api-${WERCKER_GIT_BRANCH}
    - riceo/kubectl:
      name: make sure the service is up
      server: $KUBERNETES_MASTER
      gcloud-key-json: $GCR_JSON_KEY_FILE
      gke-cluster-name: $GKE_CLUSTER_NAME
      gke-cluster-zone: $GKE_CLUSTER_ZONE
      gke-cluster-project: $GKE_CLUSTER_PROJECT
      raw-args: ">${$WERCKER_OUTPUT_DIR}/kube_tag_${WERCKER_GIT_BRANCH}"
      command: get -o template deployment api-${WERCKER_GIT_BRANCH} --template={{.metadata.labels.commit}}
#    - script:
#          name: test the deployment is up with the right commit
#          code: |
#            DEPLOYED_COMMIT=$(<$WERCKER_OUTPUT_DIR/kube_tag_${WERCKER_GIT_BRANCH})
#            if [ "$DEPLOYED_COMMIT" == "${WERCKER_GIT_COMMIT}" ]
#              then
#                echo $DEPLOYED_COMMIT" deployment up"
#              else
#                echo -e "ERROR: wrong commit is deployed"$DEPLOYED_COMMIT
#                exit 1
#              fi
  after-steps:
    - mbrevda/github-status:
      token: $GITHUB_TOKEN
      context: rest_api_deployment
      msg: deployment completed
      fail: an error has occurred while deploying
      url: https://app.wercker.com/project/byKey/8d40646f32cfcb720f96ec9f29473d19

test-with-es:
  # run tests in the api that requires an es instance
  steps:
    - pip-install
    - script:
        name: API run all tests
        code: |
          if [ -z ${ELASTICSEARCH_URL+x} ]; then echo "SKIPPED! ELASTICSEARCH_URL is set to '$ELASTICSEARCH_URL'"; else nosetests;  fi
#deploy:
#  box: ubuntu:xenial
#  steps:
#   # Use the scratch step to build a container from scratch based on the files present
#    - internal/docker-push:
#      username: $DOCKER_USERNAME
#      password: $DOCKER_PASSWORD
#      cmd: supervisord
#      entrypoint: docker-conf/docker-entrypoint.sh
#      tag: $WERCKER_GIT_COMMIT
#      ports: "80","443","8008","8009"
#      repository: opentargets/wercker-restapi
