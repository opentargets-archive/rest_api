version: 2
jobs:
  build:
    working_directory: ~/circulate
    docker:
      # - image: elasticsearch
      - image: circleci/python:2.7
        # environment:
          # FLASK_CONFIG: testing
    steps:
      - checkout
      - restore_cache:
          key: deps-a-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install requirements.txt
          command: |
            pip install virtualenv
            virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps-a-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Run tests that do not depend on ES
          command: |
            . venv/bin/activate
            python -m pytest
      # - store_artifacts:
          # path: test-reports/
          # destination: tr1
      # - store_test_results:
          # path: test-reports/

  push-containers:
    docker:
      - image: circleci/python:2.7
    environment:
      QUAY_REPO: quay.io/opentargets/rest_api
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
    working_directory: ~/circulate
    steps:
      - checkout
      - run:
          name: install envsubst and prepare swagger doc
          command: |
            sudo apt-get install -y gettext-base
            set -o allexport
            echo -e "### Reading API_VERSION from VERSION file ..."
            source VERSION
            echo -e "### sed hacking to clean up the template ..."
            mkdir app/static
            sed 's/host: .*/host: \"api.opentargets.io\"/' openapi.template.yaml | sed '/.*x-google.*/,+3d' | envsubst > app/static/openapi.yaml
            
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t circle-${CIRCLE_SHA1} -f docker/Dockerfile .
      - run:
          name: Push to Google Container Registry (gcr.io)
          command: |
            echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
            docker login -u _json_key -p "$(cat ${HOME}/gcp-key.json)" https://eu.gcr.io
            if [ -n "${CIRCLE_TAG:+1}" ]; then
              ## tag tag :) and push
              echo -e "building for tag ${CIRCLE_TAG}"
              docker tag circle-${CIRCLE_SHA1} "${GCR_REPO}:${CIRCLE_TAG}"
              docker push "${GCR_REPO}:${CIRCLE_TAG}"
              docker tag ${GCR_REPO}:${CIRCLE_TAG} ${GCR_REPO}:circle-${CIRCLE_SHA1}
            elif [ -n "${CIRCLE_BRANCH:+1}" ]; then
              ## branch tag and push
              echo -e "building for branch"
              docker tag circle-${CIRCLE_SHA1} ${GCR_REPO}:${CIRCLE_BRANCH}
              docker push ${GCR_REPO}:${CIRCLE_BRANCH}
              docker tag ${GCR_REPO}:${CIRCLE_BRANCH} ${GCR_REPO}:circle-${CIRCLE_SHA1}
            else
              echo -e "### No CIRCLE_TAG or CIRCLE_BRANCH defined"
              exit 1
            fi
            ## sha commit push
            docker push ${GCR_REPO}:circle-${CIRCLE_SHA1}
            ## push latest if master
            if [ "$CIRCLE_BRANCH" = "master" ]
              then
                docker tag ${GCR_REPO}:${CIRCLE_BRANCH} ${GCR_REPO}:latest
                docker push ${GCR_REPO}:latest
            fi
      - run:
          name: Push to Quay
          command: |
            docker login -u="opentargets+quaybot" -p="${QUAYBOT_PASSWORD}" quay.io
            if [ -n "${CIRCLE_TAG:+1}" ]; then
              ## tag tag :) and push
              docker tag circle-${CIRCLE_SHA1} ${QUAY_REPO}:${CIRCLE_TAG}
              docker push ${GCR_REPO}:${CIRCLE_TAG}
              docker tag ${QUAY_REPO}:${CIRCLE_TAG} ${QUAY_REPO}:circle-${CIRCLE_SHA1}
            elif [ -n "${CIRCLE_BRANCH:+1}" ]; then
              ## branch tag and push
              docker tag circle-${CIRCLE_SHA1} ${QUAY_REPO}:${CIRCLE_BRANCH}
              docker push ${GCR_REPO}:${CIRCLE_BRANCH}
              docker tag ${QUAY_REPO}:${CIRCLE_BRANCH} ${QUAY_REPO}:circle-${CIRCLE_SHA1}
            else
              echo -e "### No CIRCLE_TAG or CIRCLE_BRANCH defined"
              exit 1
            fi
            ## sha commit push
            docker push ${QUAY_REPO}:circle-${CIRCLE_SHA1}
            ## push latest if master
            if [ "$CIRCLE_BRANCH" = "master" ]
              then
                docker tag ${QUAY_REPO}:${CIRCLE_BRANCH} ${QUAY_REPO}:latest
                docker push ${QUAY_REPO}:latest
            fi
  deploy:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    environment:
      #TODO? read ES_URL variable from google metadata using
      # `gcloud --project ${GOOGLE_PROJECT_ID} compute project-info describe --format json`
      GOOGLE_PROJECT_ID: open-targets-eu-dev
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
      ES_URL: http://es5-mk1710:9200
      DEPLOYED_DATA_VERSION: 17.12
      MAX_NUM_INSTANCES: 1
      CPU: 1
      MEMORY_GB: 1
      DISK_SIZE_GB: 10
    steps:
      - checkout
      - run:
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run:
          name: Deploy to google endpoints (if a new branch or a new version)
          command: |
            set -o allexport
            echo -e "### Reading api version from VERSION file ..."
            source VERSION
            echo "major: $API_VERSION"
            echo "minor: $API_VERSION_MINOR"

            source .circleci/sortendpt.sh

            #make it available
            echo -e "\n\n### Substituting the config id [ ${GCENDPOINT_VERSION} ] in the appEngine yaml \n\n"
            envsubst < app.template.yaml > app.yaml

      - run:
          name: Deploy branch to google AppEngine (DEV)

          command: |
            gcloud app deploy --no-promote --version $CIRCLE_BRANCH --project ${GOOGLE_PROJECT_ID} --image-url ${GCR_REPO}:circle-${CIRCLE_SHA1}
      - run:
          name: delete instance if deployment has failed / timed out
          command: |
            gcloud --project ${GOOGLE_PROJECT_ID} app versions delete --service=default $CIRCLE_BRANCH
          when: on_fail
      - run:
          name: Cleanup ALL PREVIOUS AppEngine versions (staging)
          command: |
            source .circleci/clean_appeng_versions.sh
      - run:
          name: Cleanup DANGLING Endpoints versions (staging)
          command: source .circleci/mark_stale_endpoint_for_deletion.sh


  api-tests:
    docker:
      - image: python:2.7
    environment:
      GOOGLE_PROJECT_ID: open-targets-eu-dev
    steps:
      - checkout
      - run:
          name: Install requests library
          command: pip install requests
      - run:
          name: Trigger runscope tests on deployed branch
          command: |
            set -o allexport
            source VERSION
            python .circleci/runscope.py


  stop-instance:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_PROJECT_ID: open-targets-eu-dev
    steps:
      - checkout
      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run:
          name: Stop running version (unless [deploy] is in the last commit message)
          command: |
            GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)
            echo $GIT_COMMIT_DESC
            if [[ $GIT_COMMIT_DESC == *"[deploy]"* ]]; then
              echo "We shall not tear this down!!"
            else
              gcloud --project ${GOOGLE_PROJECT_ID} app versions stop $CIRCLE_BRANCH --service=default
            fi


  deploy-staging:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_PROJECT_ID: open-targets-staging
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
      ES_URL: http://es5-1712051521:9200
      DEPLOYED_DATA_VERSION: 17.12
      MAX_NUM_INSTANCES: 1
      CPU: 2
      MEMORY_GB: 2
      DISK_SIZE_GB: 30
    steps:
      - checkout
      - run:
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run:
          name: Deploy to google endpoints (if a new branch or a new version)
          command: |
            set -o allexport
            echo -e "### Reading api version from VERSION file ..."
            source VERSION
            echo "major: $API_VERSION"
            echo "minor: $API_VERSION_MINOR"

            source .circleci/sortendpt.sh

            #make it available
            echo -e "\n\n### Substituting the config id [ ${GCENDPOINT_VERSION} ] in the appEngine yaml \n\n"
            envsubst < app.template.yaml > app.yaml


      - run:
          name: Deploy branch to google AppEngine (Staging)
          command: |
            gcloud app deploy --no-promote --no-stop-previous-version --version $CIRCLE_TAG --project ${GOOGLE_PROJECT_ID} --image-url ${GCR_REPO}:${CIRCLE_TAG}

      - run:
          name: delete instance if deployment has failed / timed out
          command: |
            gcloud --project ${GOOGLE_PROJECT_ID} app versions delete --service=default $CIRCLE_TAG
          when: on_fail


  api-tests-staging:
    docker:
      - image: python:2.7
    environment:
      GOOGLE_PROJECT_ID: open-targets-staging
    steps:
      - checkout
      - run:
          name: Install requests library
          command: pip install requests
      - run:
          name: Trigger runscope tests on deployed branch
          command: |
            set -o allexport
            source VERSION
            python .circleci/runscope.py

  split-traffic-staging:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_PROJECT_ID: open-targets-staging
    steps:
      - checkout
      - run:
          name: install jq
          command: apt-get install -y jq && jq --version
      - run:
          name: Decode Google Cloud Credentials + authenticate
          command: |
            echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run:
          name: Split traffic over to new version (staging)
          command: |
            gcloud app services set-traffic default --splits $CIRCLE_TAG=1 --project ${GOOGLE_PROJECT_ID} 
      - run:
          name: Cleanup ALL PREVIOUS AppEngine versions (staging)
          command: |
            source .circleci/clean_appeng_versions_with_no_traffic.sh
      - run:
          name: Cleanup DANGLING Endpoints versions (staging)
          command: |
            source .circleci/mark_stale_endpoint_for_deletion.sh


  deploy-prod-eu:
    working_directory: ~/circulate
    environment:
      GOOGLE_PROJECT_ID: open-targets-api-prod-eu
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
      ES_URL: http://es5-1712051521-1712-l5w4:9200
      DEPLOYED_DATA_VERSION: 17.12
      MAX_NUM_INSTANCES: 3
      CPU: 2
      MEMORY_GB: 4
      DISK_SIZE_GB: 30
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run:
          name: Deploy to google endpoints (if a new branch or a new version)
          command: |
            set -o allexport
            echo -e "### Reading api version from VERSION file ..."
            source VERSION
            echo "major: $API_VERSION"
            echo "minor: $API_VERSION_MINOR"

            source .circleci/sortendpt.sh

            #make it available
            echo -e "\n\n### Substituting the config id [ ${GCENDPOINT_VERSION} ] in the appEngine yaml \n\n"
            envsubst < app.template.yaml > app.yaml

      - run:
          name: Deploy branch to google AppEngine (EU prod)
          command: |
            gcloud app deploy --no-promote --version $CIRCLE_TAG --project ${GOOGLE_PROJECT_ID} --image-url ${GCR_REPO}:${CIRCLE_TAG}

      - run:
          name: delete instance if deployment has failed / timed out
          command: |
            gcloud --project ${GOOGLE_PROJECT_ID} app versions delete --service=default $CIRCLE_TAG
          when: on_fail



  api-tests-prod-eu:
    docker:
      - image: python:2.7
    environment:
      GOOGLE_PROJECT_ID: open-targets-api-prod-eu
    steps:
      - checkout
      - run:
          name: Install requests library
          command: pip install requests
      - run:
          name: Trigger runscope tests on deployed branch
          command: |
            set -o allexport
            source VERSION
            python .circleci/runscope.py

  api-tests-prod-us:
    docker:
      - image: python:2.7
    environment:
      GOOGLE_PROJECT_ID: open-targets-api-prod-us
    steps:
      - checkout
      - run:
          name: Install requests library
          command: pip install requests
      - run:
          name: Trigger runscope tests on deployed branch
          command: |
            set -o allexport
            source VERSION
            python .circleci/runscope.py
  
  api-tests-prod-jp:
    docker:
      - image: python:2.7
    environment:
      GOOGLE_PROJECT_ID: open-targets-api-prod-jp
    steps:
      - checkout
      - run:
          name: Install requests library
          command: pip install requests
      - run:
          name: Trigger runscope tests on deployed branch
          command: |
            set -o allexport
            source VERSION
            python .circleci/runscope.py

  deploy-prod-us:
    working_directory: ~/circulate
    environment:
      GOOGLE_PROJECT_ID: open-targets-api-prod-us
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
      ES_URL: http://es5-1712051521-1712-9hfr:9200
      DEPLOYED_DATA_VERSION: 17.12
      MAX_NUM_INSTANCES: 3
      CPU: 2
      MEMORY_GB: 4
      DISK_SIZE_GB: 30
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run:
          name: Deploy to google endpoints (if a new branch or a new version)
          command: |
            set -o allexport
            echo -e "### Reading api version from VERSION file ..."
            source VERSION
            echo "major: $API_VERSION"
            echo "minor: $API_VERSION_MINOR"

            source .circleci/sortendpt.sh

            #make it available
            echo -e "\n\n### Substituting the config id [ ${GCENDPOINT_VERSION} ] in the appEngine yaml \n\n"
            envsubst < app.template.yaml > app.yaml

      - run:
          name: Deploy branch to google AppEngine (US prod)
          command: |
            gcloud app deploy --no-promote --version $CIRCLE_TAG --project ${GOOGLE_PROJECT_ID} --image-url ${GCR_REPO}:${CIRCLE_TAG}

      - run:
          name: delete instance if deployment has failed / timed out
          command: |
            gcloud --project ${GOOGLE_PROJECT_ID} app versions delete --service=default $CIRCLE_TAG
          when: on_fail
      


  deploy-prod-jp:
    working_directory: ~/circulate
    environment:
      GOOGLE_PROJECT_ID: open-targets-api-prod-jp
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
      ES_URL: http://es5-1712051521-1712-z5z1:9200
      DEPLOYED_DATA_VERSION: 17.12
      MAX_NUM_INSTANCES: 3
      CPU: 2
      MEMORY_GB: 4
      DISK_SIZE_GB: 30
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run:
          name: Deploy to google endpoints (if a new branch or a new version)
          command: |
            set -o allexport
            echo -e "### Reading api version from VERSION file ..."
            source VERSION
            echo "major: $API_VERSION"
            echo "minor: $API_VERSION_MINOR"

            source .circleci/sortendpt.sh

            #make it available
            echo -e "\n\n### Substituting the config id [ ${GCENDPOINT_VERSION} ] in the appEngine yaml \n\n"
            envsubst < app.template.yaml > app.yaml

      - run:
          name: Deploy branch to google AppEngine (JP prod)
          command: |
            gcloud app deploy --no-promote --version $CIRCLE_TAG --project ${GOOGLE_PROJECT_ID} --image-url ${GCR_REPO}:${CIRCLE_TAG}

      - run:
          name: delete instance if deployment has failed / timed out
          command: |
            gcloud --project ${GOOGLE_PROJECT_ID} app versions delete --service=default $CIRCLE_TAG
          when: on_fail



  split-traffic-prod:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: install jq
          command: apt-get install -y jq && jq --version
      - run:
          name: Decode Google Cloud Credentials + authenticate
          command: |
            echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run:
          name: Split traffic over to new versions (prod)
          no_output_timeout: 30m
          command: |
            gcloud app services set-traffic default --splits $CIRCLE_TAG=1 --project open-targets-api-prod-jp 
            gcloud app services set-traffic default --splits $CIRCLE_TAG=1 --project open-targets-api-prod-eu 
            gcloud app services set-traffic default --splits $CIRCLE_TAG=1 --project open-targets-api-prod-us 
      - run:
          name: Cleanup STOPPED AppEngine versions (prod)
          command: |
            source .circleci/clean_appeng_versions.sh
            source .circleci/mark_stale_endpoint_for_deletion.sh



workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      # This is really confusing: check https://circleci.com/docs/2.0/workflows/#git-tag-job-execution
      # - For a branch push unaffected by any filters, CircleCI runs the job.
      # - For a tag push unaffected by any filters, CircleCI skips the job.
      # - a job must have a filters tags section to run as a part of a tag push
      # - all its transitively dependent jobs must also have a filters tags
      # Also see https://discuss.circleci.com/t/build-required-steps-automatically-for-tag-filtered-workflows/15185
      - build:
          filters:
            tags:
              only:
                - /^prod.*/
                - /^staging.*/
      - push-containers:
          requires:
            - build
          filters:
            tags:
              only:
                - /^prod.*/
                - /^staging.*/
      - deploy:
          requires:
            - push-containers
      - api-tests:
          requires:
            - deploy
      - stop-instance:
          requires:
            - api-tests
          filters:
            branches:
              ignore: master
      - deploy-staging:
          requires:
            - push-containers
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^staging.*/
      - api-tests-staging:
          requires:
            - deploy-staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^staging.*/
      - split-traffic-staging:
          requires:
            - api-tests-staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^staging.*/


      - deploy-prod-eu:
          requires:
            - push-containers
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/
      - deploy-prod-us:
          requires:
            - push-containers
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/
      - deploy-prod-jp:
          requires:
            - push-containers
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/
      - api-tests-prod-eu:
          requires:
            - deploy-prod-eu
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/
      - api-tests-prod-us:
          requires:
            - deploy-prod-us
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/
      - api-tests-prod-jp:
          requires:
            - deploy-prod-jp
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/
      
      - holdsplit:
          type: approval
          requires:
            - api-tests-prod-eu
            - api-tests-prod-us
            - api-tests-prod-jp
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/

      - split-traffic-prod:
          requires:
            - holdsplit
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/


